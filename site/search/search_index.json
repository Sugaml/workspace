{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sugam Workspace","text":""},{"location":"#streamline-your-workflow-with-sugam-workspace","title":"\"Streamline Your Workflow with Sugam Workspace!\"","text":""},{"location":"#sugam-workspace-simplifies-your-reading-documentation","title":"Sugam Workspace simplifies your reading documentation","text":""},{"location":"kubernetes/","title":"Kubernetes Troubleshooting","text":""},{"location":"kubernetes/#inroduction","title":"Inroduction","text":"<p>Kubernetes troubleshooting is the process of identifying, diagnosing, and resolving issues in kubernetes cluster, nodes, pods, or containers.</p> <p> </p>"},{"location":"kubernetes/#kubernetes-cluster-architecture","title":"Kubernetes Cluster Architecture","text":"<p>Each Kubernetes cluster is composed of:</p> <ol> <li> <p>Nodes</p> <p>Represent a physical or virtual machine with the container runtime to support one or more containers. Nodes in an operating cluster can be categorized into: * Master node</p> <p>Hosts the cluster\u2019s control plane and is responsible for scheduling workloads, scaling, and managing the cluster state. Each cluster must have at least one master node; however, a typical choice is to provision two or more master nodes for redundancy.</p> <ul> <li>Worker node</li> </ul> <p>Hosts workloads in containers and performs the duties assigned to it by the master node.\u200d</p> </li> <li> <p>Control plane</p> <p>Composed of a number of cluster components, it\u2019s responsible for controlling the cluster to achieve a desired state.\u200d</p> </li> <li> <p>Kube-API server</p> <p>The front-end server that manages all external communication with the cluster.\u200d</p> </li> <li> <p>Etcd</p> <p>The key value database that stores cluster state and data.\u200d</p> </li> <li> <p>Kube-scheduler</p> <p>Uses etcd event data to schedule workloads on worker nodes.\u200d</p> </li> <li> <p>Kube-controller manager</p> <p>Runs a set of controllers that govern the state of the cluster\u200d</p> </li> <li> <p>Kubelet </p> <p>An agent that runs on each worker node to communicate with the API server, it\u2019s responsible for the deployment of containerized workloads in pods.\u200d</p> </li> <li> <p>Kube-proxy</p> <p>Maintains network rules that allow communication between pods and services, both internal and external to the cluster.</p> </li> </ol>"},{"location":"kubernetes/#get-started","title":"Get Started","text":""},{"location":"kubernetes/#install-kind","title":"Install <code>Kind</code>","text":"<p><code>curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64   chmod +x ./kind   mv ./kind /usr/local/bin   which kind   kind version</code></p>"},{"location":"kubernetes/#install-kubectl","title":"Install <code>kubectl</code>","text":"<pre><code> curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\n chmod +x kubectl\n mv ./kubectl /usr/local/bin/kubectl\n kubectl version --client\n</code></pre>"},{"location":"kubernetes/#create-kind-cluster","title":"Create <code>Kind Cluster</code>","text":"<p><code>kind create cluster</code></p>"},{"location":"kubernetes/#install-metrics-server-kubectl-top","title":"Install Metrics Server (<code>kubectl top</code>)","text":"<p>Issue #1 :: Kubernetes metrics-server Error \u2013 Readiness probe failed: HTTP probe failed with statuscode</p> <p>Solution:</p> <ul> <li>Download https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</li> <li>Modify and add \"- --kubelet-insecure-tls\" in deployment.spec.template.spec.containers.args</li> <li>kubectl apply -f components.yaml</li> <li>kubectl top nodes</li> <li>kubectl top  pod kube-proxy-5p7gr -n=kube-system</li> </ul>"},{"location":"kubernetes/#create-deployment-manifest","title":"Create Deployment Manifest","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: nginx-test\n  name: nginx-test\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx-test\n  template:\n    metadata:\n      labels:\n        app: nginx-test\n    spec:\n      containers:\n      - image: nginx\n        name: nginx-test\n        ports:\n          - containerPort: 80\n            name: http\n            protocol: TCP\n</code></pre>"},{"location":"kubernetes/#create-service-manifest","title":"Create Service Manifest","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-test\nspec:\n  ports:\n  - port: 80\n  selector:\n    app: nginx-test\n</code></pre>"},{"location":"kubernetes/#install-metallb","title":"Install MetalLB","text":"<p>kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.5/config/manifests/metallb-native.yaml</p>"},{"location":"kubernetes/#view-subnet-mask","title":"View subnet-mask","text":"<p><code>docker inspect &lt;container_name&gt;</code></p>"},{"location":"kubernetes/#create-meatllb-manifest","title":"Create MeatlLB manifest","text":"<pre><code>---\n\napiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: empty\n  namespace: metallb-system\n---\napiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: example\n  namespace: metallb-system\nspec:\n  addresses:\n  - 172.19.254.200-172.19.254.250  #chage first 2 numbers as per subnet mask.\n</code></pre>"},{"location":"kubernetes/#install-nginx-controller","title":"Install Nginx-controller","text":"<p>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/cloud/deploy.yaml</p>"},{"location":"kubernetes/#to-add-hosts-on-etchosts","title":"To add hosts on etc/hosts","text":"<p><code>sudo nano /etc/hosts</code></p>"},{"location":"kubernetes/#create-ingress-manifest","title":"Create Ingress Manifest","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n  name: myhost\nspec:\n  rules:\n  - host: myhost.example.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx-test  # change as per service name\n            port:\n              number: 80 # change as per service port\n        path: /\n        pathType: ImplementationSpecific\n</code></pre>"},{"location":"kubernetes/logging/","title":"Loogging","text":""},{"location":"kubernetes/logging/#using-helm-chart","title":"Using Helm Chart","text":""},{"location":"kubernetes/logging/#add-the-helm-repository","title":"Add the Helm Repository","text":"<pre><code>\nhelm repo add grafana https://grafana.github.io/helm-charts\n\n\n</code></pre>"},{"location":"kubernetes/logging/#add-the-helm-repository_1","title":"Add the Helm Repository","text":"<pre><code>\nhelm install loki grafana/loki-stack -n monitoring\n\n</code></pre>"},{"location":"kubernetes/logging/#add-the-datasource-to-the-grafana-dashboard","title":"Add the datasource to the grafana dashboard","text":""},{"location":"kubernetes/logging/#go-to-the-explore-section-and-select-loki-as-a-datasource-from-drop-down-list","title":"Go to the explore section and select loki as a datasource from drop-down list","text":""},{"location":"kubernetes/logging/#use-the-log-query-to-fetch-the-logs","title":"Use the log query to fetch the logs","text":""},{"location":"kubernetes/prometheus/","title":"Monitoring","text":""},{"location":"kubernetes/prometheus/#add-helm-repository","title":"Add Helm Repository","text":"<pre><code>\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n</code></pre>"},{"location":"kubernetes/prometheus/#install-prometheus","title":"Install Prometheus","text":"<pre><code>\nhelm upgrade --install monitoring prometheus-community/prometheus --set persistence.enabled=true,persistence.size=8Gi --namespace monitoring\n\n</code></pre>"},{"location":"kubernetes/prometheus/#logging","title":"Logging","text":""},{"location":"kubernetes/prometheus/#add-helm-repository_1","title":"Add Helm Repository","text":"<pre><code>helm repo add grafana https://grafana.github.io/helm-charts\n\n</code></pre>"},{"location":"kubernetes/prometheus/#install-loki-stack","title":"Install Loki Stack","text":"<pre><code>helm install loki grafana/loki-stack -n monitoring\n\n</code></pre>"},{"location":"kubernetes/prometheus/#observablity","title":"Observablity","text":""},{"location":"kubernetes/prometheus/#install-grafana-dashbaord","title":"Install Grafana Dashbaord","text":"<pre><code>\nhelm install grafana grafana/grafana --namespace monitoring --set persistence.enabled=true,persistence.size=1Gi\n\n</code></pre>"},{"location":"kubernetes/prometheus/#alerting","title":"Alerting","text":""},{"location":"kubernetes/prometheus/#add-gchat-alert-repository","title":"Add gChat Alert Repository","text":"<pre><code>helm repo add julb https://charts.julb.me\n\n</code></pre>"},{"location":"kubernetes/prometheus/#install-gchat-alert","title":"Install gChat Alert","text":"<pre><code>\nhelm install alert-manager julb/alertmanager-gchat-integration --namespace monitoring\n\n</code></pre>"},{"location":"kubernetes/prometheus/#step-2","title":"Step 2:","text":"<p>Verify if all the pods are running.</p> <p><code>kubectl get pods -n monitoring</code></p>"},{"location":"kubernetes/prometheus/#step-3","title":"Step 3:","text":"<p>Verify service available.</p> <p><code>kubectl get svc -n monitoring</code></p>"},{"location":"kubernetes/prometheus/#step-4","title":"Step 4:","text":"<p>Update configmap of prometheus alert-manager with the webhook url of gchat.</p> <pre><code>apiVersion: v1\ndata:\n  alertmanager.yml: |\n    global: {}\n    receivers:\n        webhook_configs:\n        - url: 'http://&lt;GCHAT_SERVICE-NAME&gt;:&lt;SERVICE_PORT&gt;/alerts?room=&lt;Google_Room_Name&gt;' ```\n</code></pre>"},{"location":"kubernetes/prometheus/#references","title":"References","text":"<p>https://prometheus.io/docs/alerting/latest/configuration/#webhook_config https://stackoverflow.com/questions/66333868/send-notification-from-prometheus-alertmanager-to-google-chat-room/66337152#66337152 https://github.com/mr-karan/calert</p>"}]}